//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Facturando.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FacturandoEntities : DbContext
    {
        public FacturandoEntities()
            : base("name=FacturandoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Action> Action { get; set; }
        public DbSet<Bill> Bill { get; set; }
        public DbSet<BillDetail> BillDetail { get; set; }
        public DbSet<BillTaxes> BillTaxes { get; set; }
        public DbSet<Client> Client { get; set; }
        public DbSet<Inventory> Inventory { get; set; }
        public DbSet<InventoryClassification> InventoryClassification { get; set; }
        public DbSet<InventoryDetail> InventoryDetail { get; set; }
        public DbSet<InventoryLocation> InventoryLocation { get; set; }
        public DbSet<InventoryType> InventoryType { get; set; }
        public DbSet<Module> Module { get; set; }
        public DbSet<Product> Product { get; set; }
        public DbSet<Remission> Remission { get; set; }
        public DbSet<RemissionDetail> RemissionDetail { get; set; }
        public DbSet<Rol> Rol { get; set; }
        public DbSet<RolAction> RolAction { get; set; }
        public DbSet<RolModule> RolModule { get; set; }
        public DbSet<Tax> Tax { get; set; }
        public DbSet<UnitMeasure> UnitMeasure { get; set; }
        public DbSet<User> User { get; set; }
        public DbSet<UserRol> UserRol { get; set; }
        public DbSet<IdentificacionType> IdentificacionType { get; set; }
        public DbSet<ConfigurationSystem> ConfigurationSystem { get; set; }
        public DbSet<Country> Country { get; set; }
        public DbSet<CurrencyType> CurrencyType { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<BillTemp> BillTemp { get; set; }
        public DbSet<RemissionTemp> RemissionTemp { get; set; }
        public DbSet<CashBox> CashBox { get; set; }
        public DbSet<CashBoxDetail> CashBoxDetail { get; set; }
        public DbSet<CashBoxType> CashBoxType { get; set; }
    
        public virtual ObjectResult<GetBillNumber_Result> GetBillNumber(string macAddress)
        {
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("MacAddress", macAddress) :
                new ObjectParameter("MacAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBillNumber_Result>("GetBillNumber", macAddressParameter);
        }
    
        public virtual ObjectResult<GetRemissionNumber_Result> GetRemissionNumber(string macAddress)
        {
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("MacAddress", macAddress) :
                new ObjectParameter("MacAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRemissionNumber_Result>("GetRemissionNumber", macAddressParameter);
        }
    
        public virtual ObjectResult<GetInventoryFromSP_Result> GetInventoryFromSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventoryFromSP_Result>("GetInventoryFromSP");
        }
    
        public virtual ObjectResult<DailyGet_Result> DailyGet(Nullable<System.DateTime> initDate, Nullable<System.DateTime> endDate)
        {
            var initDateParameter = initDate.HasValue ?
                new ObjectParameter("InitDate", initDate) :
                new ObjectParameter("InitDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DailyGet_Result>("DailyGet", initDateParameter, endDateParameter);
        }
    }
}
